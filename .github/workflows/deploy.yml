name: Build and Deploy Container App to Azure

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

env:
  RESOURCE_GROUP: BCSAI2024-DEVOPS-STUDENTS-A-DEV
  REGISTRY_NAME: dmoneycontainerregistry
  IMAGE_BASE_NAME: dmoneyimage
  WEB_APP_NAME: dmoneyWebApp
  LOCATION: westeurope

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Deploy infrastructure using Bicep
    - name: Deploy infrastructure using Bicep
      run: |
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file main.bicep \
          --parameters \
            dmoneyContainerRegistryName=${{ env.REGISTRY_NAME }} \
            dmoneyAppServicePlanName=dmoneyAppServicePlan \
            dmoneyWebAppName=${{ env.WEB_APP_NAME }} \
            location=${{ env.LOCATION }} \
          --mode Complete

    # Step 4: Fetch ACR credentials dynamically from Azure
    - name: Fetch ACR credentials from Azure
      run: |
        echo "REGISTRY_LOGIN_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --query "loginServer" -o tsv)" >> $GITHUB_ENV
        echo "REGISTRY_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "username" -o tsv)" >> $GITHUB_ENV
        echo "REGISTRY_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "passwords[0].value" -o tsv)" >> $GITHUB_ENV

    # Step 5: Fetch Key Vault secrets dynamically
    - name: Fetch Key Vault secrets
      run: |
        echo "KEY_VAULT_NAME=$(az keyvault list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" -o tsv)" >> $GITHUB_ENV
        echo "ACR_SECRET_USERNAME=$(az keyvault secret show --name acr-username --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV
        echo "ACR_SECRET_PASSWORD=$(az keyvault secret show --name acr-password --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV

    # Step 6: Log in to Azure Container Registry
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    # Step 7: Set image version
    - name: Set image version
      run: echo "IMAGE_VERSION=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_ENV

    # Step 8: Ensure Docker is Installed
    - name: Ensure Docker is Installed
      run: docker --version

    # Step 9: Build and push Docker image
    - name: Build and push image
      run: |
        docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_VERSION }}
        docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:latest
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_VERSION }}
        docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:latest

    outputs:
      image: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures the deploy job runs after build

    steps:
    # Step 1: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 2: Deploy Docker image to Azure Web App
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.WEB_APP_NAME }}
        images: ${{ needs.build.outputs.image }}
#Comment